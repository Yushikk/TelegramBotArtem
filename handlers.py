import os
from aiogram import F, Router
from aiogram.filters.command import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

router = Router()


class Whichname(StatesGroup):
    taskname = State()
    hours = State()
    day = State()
    minutes = State()
    result_filename = ''


class ResultName(StatesGroup):
    day1 = State()


class Clear(StatesGroup):
    day2 = State()


@router.message(Command('start'))
async def command_start(message):
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç!\n{message.from_user.first_name}\n–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—åüòÄ –Ø –±–æ—Ç-–ï–∂–µ–¥–Ω–µ–≤–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–æ—Å—Ç–∏—Ç —Ç–µ–±–µ –∂–∏–∑–Ω—å')


@router.message(Command('help'))
async def command_help(message):
    await message.answer("""–í—Å–µ–≥–¥–∞ —Ä–∞–¥ —Ç–µ–±–µ –ø–æ–º–æ—á—å! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ —è –º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å
    /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    /help - —Ä–∞—Å—Å–∫–∞–∂—É –æ —Ç–æ–º, —á—Ç–æ —É–º–µ—é
    /add - –ø–æ–∑–≤–æ–ª–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–ª–æ –≤ –±–æ—Ç. –°–Ω–∞—á–∞–ª–∞ –æ–Ω –ø–æ–ø—Ä–æ—Å–∏—Ç –≤–∞—Å –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–º–æ–≥–æ –¥–µ–ª–∞, –∞ –∑–∞—Ç–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è
    /show - –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –¥–µ–ª–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
    /clear - —É–¥–∞–ª—è–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ –¥–µ–ª–∞ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å""")


@router.message(F.text == '/add')
async def func(message: Message, state: FSMContext):
    await state.set_state(Whichname.day)
    await message.answer('–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–ª–æ', reply_markup=choose(message.from_user.id))


def choose(user_telegram_id: int) -> ReplyKeyboardMarkup:
    choose_list = [
        [KeyboardButton(text="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")],
        [KeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫")],
        [KeyboardButton(text="–°—Ä–µ–¥–∞")],
        [KeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥")],
        [KeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞")],
        [KeyboardButton(text="–°—É–±–±–æ—Ç–∞")],
        [KeyboardButton(text="–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=choose_list, resize_keyboard=True, one_time_keyboard=True)
    return keyboard


@router.message(Whichname.day)
async def func_day(message: Message, state: FSMContext):
    Whichname.result_filename = str(message.from_user.id) + message.text + '.txt'
    file = open(Whichname.result_filename, 'a')
    file.write(f'{message.text}\n')
    file.close()
    await state.update_data(day=message.text)
    await state.set_state(Whichname.taskname)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞')


@router.message(Whichname.taskname)
async def func_taskname(message: Message, state: FSMContext):
    file = open(Whichname.result_filename, 'a')
    file.write(f'{message.text}\n')
    file.close()
    await state.update_data(taskname=message.text)
    await state.set_state(Whichname.hours)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö', reply_markup=chas(message.from_user.id))


@router.message(Whichname.hours)
async def func_hours(message: Message, state: FSMContext):
    file = open(Whichname.result_filename, 'a')
    file.write(f'{message.text}:')
    file.close()
    await state.update_data(hours=message.text)
    await state.set_state(Whichname.minutes)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω—É—Ç—ã', reply_markup=minut(message.from_user.id))


@router.message(Whichname.minutes)
async def func_minutes(message: Message, state: FSMContext):
    file = open(Whichname.result_filename, 'a')
    file.write(f'{message.text}\n')
    file.close()
    await state.update_data(minutes=message.text)
    tasks = await state.get_data()
    await message.answer(
        f'–í–∞—à–µ –¥–µ–ª–æ: {tasks["taskname"]}\n–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {tasks["day"]}\n–í—Ä–µ–º—è: {tasks["hours"]}:{tasks["minutes"]}')
    await state.clear()


def chas(user_telegram_id: int) -> ReplyKeyboardMarkup:
    chas_list = [
        [KeyboardButton(text="01"), KeyboardButton(text="02"), KeyboardButton(text="03"), KeyboardButton(text="04")],
        [KeyboardButton(text="05"), KeyboardButton(text="06"), KeyboardButton(text="07"), KeyboardButton(text="08")],
        [KeyboardButton(text="09"), KeyboardButton(text="10"), KeyboardButton(text="11"), KeyboardButton(text="12")],
        [KeyboardButton(text="13"), KeyboardButton(text="14"), KeyboardButton(text="15"), KeyboardButton(text="16")],
        [KeyboardButton(text="17"), KeyboardButton(text="18"), KeyboardButton(text="19"), KeyboardButton(text="20")],
        [KeyboardButton(text="21"), KeyboardButton(text="22"), KeyboardButton(text="23"), KeyboardButton(text="00")]

    ]
    keyboard = ReplyKeyboardMarkup(keyboard=chas_list, resize_keyboard=True, one_time_keyboard=True)
    return keyboard


def minut(user_telegram_id: int) -> ReplyKeyboardMarkup:
    minut_list = [
        [KeyboardButton(text="01"), KeyboardButton(text="02"), KeyboardButton(text="03"), KeyboardButton(text="04"),
         KeyboardButton(text="05")],
        [KeyboardButton(text="06"), KeyboardButton(text="07"), KeyboardButton(text="08"), KeyboardButton(text="09"),
         KeyboardButton(text="10")],
        [KeyboardButton(text="11"), KeyboardButton(text="12"), KeyboardButton(text="13"), KeyboardButton(text="14"),
         KeyboardButton(text="15")],
        [KeyboardButton(text="16"), KeyboardButton(text="17"), KeyboardButton(text="18"), KeyboardButton(text="19"),
         KeyboardButton(text="20")],
        [KeyboardButton(text="21"), KeyboardButton(text="22"), KeyboardButton(text="23"), KeyboardButton(text="24"),
         KeyboardButton(text="25")],
        [KeyboardButton(text="26"), KeyboardButton(text="27"), KeyboardButton(text="28"), KeyboardButton(text="29"),
         KeyboardButton(text="30")],
        [KeyboardButton(text="31"), KeyboardButton(text="32"), KeyboardButton(text="33"), KeyboardButton(text="34"),
         KeyboardButton(text="35")],
        [KeyboardButton(text="36"), KeyboardButton(text="37"), KeyboardButton(text="38"), KeyboardButton(text="39"),
         KeyboardButton(text="40")],
        [KeyboardButton(text="41"), KeyboardButton(text="42"), KeyboardButton(text="43"), KeyboardButton(text="44"),
         KeyboardButton(text="45")],
        [KeyboardButton(text="46"), KeyboardButton(text="47"), KeyboardButton(text="48"), KeyboardButton(text="49"),
         KeyboardButton(text="50")],
        [KeyboardButton(text="51"), KeyboardButton(text="52"), KeyboardButton(text="53"), KeyboardButton(text="54"),
         KeyboardButton(text="55")],
        [KeyboardButton(text="56"), KeyboardButton(text="57"), KeyboardButton(text="58"), KeyboardButton(text="59"),
         KeyboardButton(text="00")],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=minut_list, resize_keyboard=True, one_time_keyboard=True)
    return keyboard


@router.message(F.text == '/show')
async def func(message: Message, state: FSMContext):
    await state.set_state(ResultName.day1)
    await message.answer('–ó–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–µ–ª–∞', reply_markup=choose(message.from_user.id))


@router.message(ResultName.day1)
async def func_day1(message: Message, state: FSMContext):
    Whichname.result_filename = str(message.from_user.id) + message.text + '.txt'
    if os.path.exists(Whichname.result_filename):
        file = open(Whichname.result_filename, 'r')
        await message.answer('–í–∞—à–∏ –¥–µ–ª–∞ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å:\n' + file.read())
        file.close()
    else:
        await message.answer('–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–¥–∞—á –Ω–µ—Ç')
    await state.clear()


@router.message(F.text == '/clear')
async def func(message: Message, state: FSMContext):
    await state.set_state(Clear.day2)
    await message.answer('–ó–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —É–¥–∞–ª–∏—Ç—å –¥–µ–ª–∞', reply_markup=choose(message.from_user.id))


@router.message(Clear.day2)
async def func_day2(message: Message, state: FSMContext):
    Whichname.result_filename = str(message.from_user.id) + message.text + '.txt'
    if os.path.exists(Whichname.result_filename):
        os.remove(Whichname.result_filename)
        await message.answer('–î–µ–ª–∞ —É–¥–∞–ª–µ–Ω—ã')
    else:
        await message.answer('–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–¥–∞—á –Ω–µ—Ç')
    await state.clear()
